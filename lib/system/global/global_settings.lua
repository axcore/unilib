---------------------------------------------------------------------------------------------------
-- unilib mod by A S Lewis, incorporating materials from many other mods
---------------------------------------------------------------------------------------------------
-- global_settings.lua
--      Import Minetest settings as global variables
---------------------------------------------------------------------------------------------------

local S = unilib.intllib

---------------------------------------------------------------------------------------------------
-- Minetest settings
---------------------------------------------------------------------------------------------------

-- Minetest settings are specified by the settingtypes.txt file
-- To override Minetest settings, see the ../lib/system/global/global_override.lua file

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Log settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Flag set to true if (real) player and (fake) non-player actions are logged; false if only (real)
--      player actions are logged
unilib.setting.log_non_player_actions_flag =
        core.settings:get_bool("unilib_log_non_player_actions_flag", false)
-- Flag set to true if chat commands should show multi-line output in both the debug file and the
--      chat window; false if multi-line output should only be shown in the chat window
unilib.setting.log_chat_cmd_flag = core.settings:get_bool("unilib_log_chat_cmd_flag", false)

-- Show startup messages (those generated by code in init.lua)
unilib.setting.show_startup_msg_flag = core.settings:get_bool("unilib_show_startup_msg_flag", true)

-- Show information messages in the debug file and the chat window
unilib.setting.show_msg_flag = core.settings:get_bool("unilib_show_msg_flag", true)
-- Show error messages in the debug file and the chat window
unilib.setting.show_error_flag = core.settings:get_bool("unilib_show_error_flag", true)
-- Show warning messages in the debug file and the chat window
unilib.setting.show_warning_flag = core.settings:get_bool("unilib_show_warning_flag", true)

-- Show information about package imports (for debugging purposes). Ignored if
--      unilib.setting.show_msg_flag is not set
-- Show information message for every package that appears more than once in the remix(es)
unilib.setting.show_pkg_remix_flag = core.settings:get_bool("unilib_show_pkg_remix_flag", false)
-- Show information message for every loaded package
unilib.setting.show_pkg_load_flag = core.settings:get_bool("unilib_show_pkg_load_flag", false)
-- Show information message for every initialised package
unilib.setting.show_pkg_init_flag = core.settings:get_bool("unilib_show_pkg_init_flag", false)
-- Show information message for every executed package
unilib.setting.show_pkg_exec_flag = core.settings:get_bool("unilib_show_pkg_exec_flag", false)
-- Show information message for every post-executed package
unilib.setting.show_pkg_post_flag = core.settings:get_bool("unilib_show_pkg_post_flag", false)
-- Show extra debug messages when packages are being imported
unilib.setting.show_pkg_debug_flag = core.settings:get_bool("unilib_show_pkg_debug_flag", false)

-- Show information about remix CSV files (for debugging purposes). Ignored if
--      unilib.setting.show_msg_flag is not set
-- Show information message for every biome that is specified more than once (in the same CSV file,
--      or in two different ones)
unilib.setting.show_csv_duplicate_flag =
        core.settings:get_bool("unilib_show_csv_duplicate_flag", false)

-- Show simple/detailed analysis about every dependent package that is not specified by a remix (the
--      output can be copied into the remix packages.csv file)
-- HINT: If either of these flags is true, the following flags are automatically set to true
--      (without which, the results would be incomplete):
--          unilib.setting.force_replace_flag
--          unilib.setting.force_load_dependent_pkg_flag
--          unilib.setting.force_load_minimal_pkg_flag
--          unilib.setting.force_load_optional_pkg_flag
--          unilib.setting.force_load_suggested_pkg_flag
unilib.setting.show_dependency_simple_flag =
        core.settings:get_bool("unilib_show_dependency_simple_flag", false)
unilib.setting.show_dependency_detailed_flag =
        core.settings:get_bool("unilib_show_dependency_detailed_flag", false)
-- Flag set to true, if all specified remixes should be combined in one analysis; false if each
--      specified remix should be analysed separately
unilib.setting.show_dependency_combined_flag =
        core.settings:get_bool("unilib_show_dependency_combined_flag", false)
-- Flag set to true, if the dependency analysis should not progress beyond the first hard dependency
--      (the .depends field in each package's entry in unilib.global.pkg_table) (not recommended)
unilib.setting.show_dependency_hard_limit_flag =
        core.settings:get_bool("unilib_show_dependency_hard_limit_flag", false)
-- Flag set to true, if the dependency analysis should not progress beyond the first soft dependency
--      (the .at_least_one, .optional and .suggested fields in each package's entry in
--      unilib.global.pkg_table) (recommended)
unilib.setting.show_dependency_soft_limit_flag =
        core.settings:get_bool("unilib_show_dependency_soft_limit_flag", true)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Remix settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- A string containing the names of one or more remixes and/or packages, separated by whitespace
--      e.g. "mtgame bonemeal"
-- Each name is the name of a remix, unless it is preceded by a special character:
--      @ - precedes the name of a remix (optional)
--      + - precedes the name of a package (compulsory)
-- Each name (or special character) can also be preceded by the "!" character, which means that the
--      remix/package is NOT loaded. For example, the following two lines are equivalent:
--          "default !bonemeal"
--          "@default !@bonemeal"
-- Names preceded by the ! character are processed before anything is loaded, so the following two
--      lines are equivalent:
--          "default !+brick_ordinary"
--          "!+brick_ordinary default"
-- Likewise, in each of the following lines, the remix is NOT loaded:
--          "default !default"
--          "!default default"
--
-- Each remix name matches the name of a directory in ../csv/remix
-- The following remix names are reserved, and must NOT be preceded by special character(s):
--      everything nothing
-- If "everything" is specified, all remixes are loaded in alphabetical order. In this situation,
--      the "!" character is ignored; any remix/packages names preceded by "!" are loaded
-- If "nothing" is specified, no remixes are loaded. "nothing" overrides everything else, including
--      the "everything" remix when both are specified
--
-- Note that the "everything" remix is intended for testing purposes only; it is not a viable way
--      to create a world that's fun to play
-- Note that even when all remixes are loaded, not all packages will be loaded; some packages may
--      not be specified by any remix, and other packages will be incompatible with each other
-- Note that duplicate names will not generate a warning or error; they are simply ignored
-- Note that the "default" remix contains material from minetest_game's default mod; it is not
--      unilib's default remix
unilib.setting.init_remix_pkg_set = core.settings:get("unilib_init_remix_pkg_set") or "nothing"

-- Built-in remixes specify, in their list of packages, all hard and soft dependencies; but no remix
--      is forced to do that
-- Flag set to true if, during the initialisation phase of ../lib/system/load/, any package's hard
--      dependencies should be loaded and initialised, if they haven't already been
unilib.setting.force_load_dependent_pkg_flag =
        core.settings:get_bool("unilib_force_load_dependent_pkg_flag", true)
-- Flag set to true if, during the initialisation phase of ../lib/system/load/, any package's
--      minimal ("at least one") dependencies should be loaded and initialised, if they haven't
--      already been
unilib.setting.force_load_minimal_pkg_flag =
        core.settings:get_bool("unilib_force_load_minimal_pkg_flag", false)
-- Flag set to true if, during the initialisation phase of ../lib/system/load/, any package's soft
--      dependencies should be loaded and initialised, if they haven't already been
unilib.setting.force_load_optional_pkg_flag =
        core.settings:get_bool("force_load_optional_pkg_flag", false)
-- Flag set to true if, during the initialisation phase of ../lib/system/load/, any package's
--      suggested dependencies should be loaded and initialised, if they haven't already been
unilib.setting.force_load_suggested_pkg_flag =
        core.settings:get_bool("force_load_suggested_pkg_flag", false)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Base package settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Flag set to true if packages should be prevented from clearing registered biomes
unilib.setting.protect_biomes_flag = core.settings:get_bool("unilib_protect_biomes_flag", false)
-- Flag set to true if packages should be prevented from clearing registered decorations
unilib.setting.protect_decorations_flag =
        core.settings:get_bool("unilib_protect_decorations_flag", false)
-- Flag set to true if packages should be prevented from clearing registered ores
unilib.setting.protect_ores_flag = core.settings:get_bool("unilib_protect_ores_flag", false)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- minetest_game settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Flag set to true if code adapted from minetest_game should be allowed to create items which don't
--      exist in the original code (i.e. an apple wood bookshelf exists and is created by the
--      "tree_apple" package, but an aspen wood bookshelf does not exist, yet it is created by the
--      "tree_aspen" package)
-- The value of the flag also applies to tweaks; for example, moreblocks updates some craft recipes
--      from minetest_game; if this flag is true, the updates are applied to unilib as well
unilib.setting.mtgame_tweak_flag = core.settings:get_bool("unilib_mtgame_tweak_flag", false)
-- Flag set to true if ABMs and LBMs from minetest_game should be disabled, so that they don't
--      duplicate the action of unilib ABMs and LBMs
-- Note that each ABM and LBM is disabled only when the unilib equivalent is specified. Note also
--      that the origianl ABM handling the spread of flora (flowers, mushrooms, grasses etc) will be
--      disabled regardless of the value of this setting, if the "abm_standard_flora_spread" package
--      is executed
unilib.setting.mtgame_disable_abm_lbm_flag =
        core.settings:get_bool("unilib_mtgame_disable_abm_lbm_flag", false)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Original mod settings (general)
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Flag set to true if all the replace mode "replace" should apply to all source mods, replacing the
--      value specified in ../csv/mods/imported.csv
unilib.setting.force_replace_flag = core.settings:get_bool("unilib_force_replace_flag", false)
-- Flag set to true to force unilib panes to use the "unipane" group, rather than the original
--      "pane" group. If false, the "unipane" group is used only when running on top of
--      minetest_game
unilib.setting.force_unipanes_flag = core.settings:get_bool("unilib_force_unipanes_flag", false)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Original mod settings (specific)
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- (3d_armor)
-- Increase this value if you get initialisation glitches when a player joins
unilib.setting.armour_init_delay = unilib.utils.settings_get_int("unilib_armour_init_delay") or 2
-- Increase this value if armour is not deposited in bones (i.e. bones:bones from minetest_game),
--      due to server lag
unilib.setting.armour_bones_delay = unilib.utils.settings_get_int("unilib_armour_bones_delay") or 1
-- How often player armour items are updated
unilib.setting.armour_update_time = unilib.utils.settings_get_int("unilib_armour_update_time") or 1
-- Flag set to true if a player drops armour when they die
unilib.setting.armour_drop_flag = core.settings:get_bool("unilib_armour_drop_flag", true)
-- Flag set to true if armour is pulverised when a player dies (overrides
--      unilib.setting.armour_drop_flag)
unilib.setting.armour_destroy_flag = core.settings:get_bool("unilib_armour_destroy_flag", false)
-- Armour effectiveness factor. Change the value to increase or decrease effectiveness, e.g. use
--      0.5 to reduce effectiveness by half
unilib.setting.armour_level_multiplier =
        unilib.utils.settings_get_float("unilib_armour_level_multiplier") or 1
-- Armour healing factor. Change the value to increase or decrease overall armour healing, e.g. use
--      0 to disable healing altogether
unilib.setting.armour_heal_multiplier =
        unilib.utils.settings_get_float("unilib_armour_heal_multiplier") or 1
-- Armour set string. Add or remove bodyparts from this string to specify what comprises a full set
--      of armour
unilib.setting.armour_set_bodyparts =
        core.settings:get("unilib_armour_set_bodyparts") or "head torso hands legs feet shield"
-- Armour set multiplier, setting the bonus for a player who is wearing a full set of armour. Set to
--      the same value as unilib.setting.armour_level_multiplier to disable the bonus
unilib.setting.armour_set_multiplier =
        unilib.utils.settings_get_float("unilib_armour_se_multiplier") or 1.1
-- Flag set to true to enable water protection (periodically restores breath when activated)
unilib.setting.armour_water_protect_flag =
        core.settings:get_bool("unilib_armour_water_protect_flag", true)
-- Flag set to true to enable fire protection
unilib.setting.armour_fire_protect_flag =
        core.settings:get_bool("unilib_armour_fire_protect_flag", false)
-- Flag set to true to enable fire damage from torches
unilib.setting.armour_fire_protect_torch_flag =
        core.settings:get_bool("unilib_armour_fire_protect_torch_flag", false)
-- Flag set to true to enable punch damage effects
unilib.setting.armour_punch_damage_flag =
        core.settings:get_bool("unilib_armour_punch_damage_flag", true)
-- Flag set to true if armour is not visible on the player model
unilib.setting.armour_transparent_flag =
        core.settings:get_bool("unilib_armour_transparent_flag", false)
-- Flag set to true to disable shield sounds
unilib.setting.armour_disable_shield_sound_flag =
        core.settings:get_bool("unilib_armour_disable_shield_sound_flag", false)

-- (advtrains)
-- Flag set to true if train platforms should be created for all suitable stone nodes. Automatically
--      set back to false if advtrains is not loaded
unilib.setting.advtrains_update_flag = core.settings:get_bool("unilib_advtrains_update_flag", true)

-- (beacons)
-- Max height (in blocks) of a beacon, or 0 for infinite height
unilib.setting.beacons_height_max = unilib.utils.settings_get_int("unilib_beacons_height_max") or 0

-- (beautiflowers)
-- Amount of flowers to be generated (5 = normal, < 5 few, > 5 many)
unilib.setting.beautiflowers_spawn_ratio =
        unilib.utils.settings_get_int("unilib_beautiflowers_spawn_ratio") or 5

-- (biome_lib)
-- The mod provides an API with two functions, both are simulated crudely by unilib decorations
-- Calls to biome_lib.register_on_generate() are simulated by calls to
--      unilib.register_decoration_convertable() (in
--      ../lib/system/register/register_deco_convertable.lua)
-- The decoration's .fill_ratio varies from item to item. Its value is provided by a call to
--      unilib.utils.convert_biome_lib() (in ../lib/shared/utils/utils_biome_lib_conversion.lua).
--      See the "bush_branching_yellow" package for an example
-- A factor by which the .fill_ratio is multiplied, so that the decorations are not too numerous
unilib.setting.biome_lib_spawn_factor =
        unilib.utils.settings_get_float("unilib_biome_lib_spawn_factor") or 0.1
-- Calls to biome_lib.register_active_spawner() are simulated as simple decorations with a
--      static value for the decoration's .fill_ratio (packages are free to use their own value, if
--      convenient)
unilib.setting.biome_lib_fill_ratio =
        unilib.utils.settings_get_float("unilib_biome_lib_fill_ratio") or 0.001

-- (cement)
-- Lighten the shade of rough concrete, reducing the contrast between it and its smooth concrete
--      equivalent (as in the original mod's code). It's recommended to enable this setting if
--      using unifieddyes, and disable it if not
unilib.setting.concrete_reduce_contrast_flag =
    core.settings:get_bool("unilib_concrete_reduce_contrast_flag", false)

-- (cheese)
-- Allow imitation milks such as soy to be used in the cheese production process
unilib.setting.cheese_allow_imitation_flag =
        core.settings:get_bool("unilib_cheese_allow_imitation_flag", true)

-- (cottages)
-- Flag set to true if items from the cottages mode should be tweaked for slower computers
unilib.setting.cottages_slow_flag = core.settings:get_bool("unilib_cottages_slow_flag", false)
-- Flag set to true if pitchforks should be able to dig all "fertile" turfs; false if they should
--      dig only ordinary dirt with turf
unilib.setting.cottages_versatile_pitchfork_flag =
        core.settings:get_bool("unilib_cottages_versatile_pitchfork_flag", false)
-- The style of country roads to create (when the "road_country" package is loaded): "simple" for
--      full nodes with straight roads and no curves or junctions, "flat" for full nodes with curves
--      and junctions, "nodebox" like flat, but has a nodebox that fits to the node, "mesh" like
--      nodebox, but using a nice, roundish model
unilib.setting.cottages_road_mode = core.settings:get("unilib_cottages_road_mode") or "mesh"

-- (cropocalypse)
-- Flag set to true to allow saltwater kelp "farming" in jars, providing a limitless food source
unilib.setting.cropocalypse_infinite_kelp_flag =
        core.settings:get_bool("unilib_cropocalypse_infinite_kelp_flag", false)

-- (cucina_vegana)
-- Flag set to false for "farming" mod crops, true for "farming_redo" crops
unilib.setting.cucina_vegana_redo_flag =
        core.settings:get_bool("unilib_cucina_vegana_redo_flag", true)

-- (death_compass)
-- False to use realistic compass textures; true to use bony compass textures
unilib.setting.death_compass_spooky_flag =
        core.settings:get_bool("unilib_death_compass_spooky_flag", false)
-- (death_compass)
-- The number of seconds for which a death compass will remain active. Use 0 to let the compass be
--      active indefinitely
unilib.setting.death_compass_duration =
        unilib.utils.settings_get_int("unilib_death_compass_duration") or 0
-- Give a death compass to a player automatically, when they die
unilib.setting.death_compass_auto_flag =
        core.settings:get_bool("unilib_death_compass_auto_flag", false)

-- (drinks)
-- Reduce the number of juices registered to just those available in the original "drinks" mod
unilib.setting.drinks_restrict_original_flag =
        core.settings:get_bool("unilib_drinks_restrict_original_flag", false)
-- Reduce the number of juices registered to just those made from unilib fruits (including some
--      berries)
unilib.setting.drinks_restrict_fruit_flag =
        core.settings:get_bool("unilib_drinks_restrict_fruit_flag", false)

-- (earthbuild)
-- Flag set to true if the turf cutter can be used on all compatible dirt-with-turf nodes, or false
--      if it can only be used on ordinary dirt with turf (as in the original mod)
unilib.setting.earthbuild_extend_cutter_flag =
        core.settings:get_bool("unilib_earthbuild_extend_cutter_flag", false)

-- (ethereal-ng)
-- Maximum fishing time, in seconds (the minimum is a third of this value; the maximum can be
--      further reduced by 20 seconds using bait, so don't use a value lower than 25)
unilib.setting.ethereal_fishing_time =
        unilib.utils.settings_get_int("unilib_ethereal_fishing_time") or 45
-- Flag set to true if fishing should produce fewer fish, and more junk items (makes fishing harder)
unilib.setting.ethereal_fishing_hard_flag =
        core.settings:get_bool("unilib_ethereal_fishing_hard_flag", false)

-- (facade, mymillwork)
-- Flag for carving and milling machines. Set to true if only the owner can use them, set to false
--      if everyone can use them. Even when false, only the owner can remove the machine
unilib.setting.protect_machines_flag = core.settings:get_bool("unilib_protect_machines_flag", false)

-- (fachwerk)
-- Fachwerk provides some timber-frame nodes that are actually duplicates, once they have been
--      adjusted with a screwdriver. Flag set to true to omit the duplicates, or false to provide
--      all timber-frame nodes
unilib.setting.fachwerk_all_frames_flag =
        core.settings:get_bool("unilib_fachwerk_all_frames_flag", false)
-- unilib packages based on fachwerk can create a large number of timber-frame nodes that weren't
--      present in the original (using baked clay and various glass nodes). Flag set to true to
--      allow this, or false to not
unilib.setting.fachwerk_extra_nodes_flag =
        core.settings:get_bool("unilib_fachwerk_extra_nodes_flag", false)

-- (flowerpot)
-- Flag set to true if all suitable flowers can be added to compatible flowerpots
unilib.setting.flowerpot_add_flowers_flag =
        core.settings:get_bool("unilib_flowerpot_add_flowers_flag", true)
-- Flag set to true if all suitable mushrooms can be added to compatible flowerpots
unilib.setting.flowerpot_add_mushrooms_flag =
        core.settings:get_bool("unilib_flowerpot_add_mushrooms_flag", false)
-- Flag set to true if all suitable ferns, grasses and plants can be added to compatible flowerpots
unilib.setting.flowerpot_add_plants_flag =
        core.settings:get_bool("unilib_flowerpot_add_plants_flag", false)
-- Flag set to true if all suitable saplings can be added to compatible flowerpots
unilib.setting.flowerpot_add_saplings_flag =
        core.settings:get_bool("unilib_flowerpot_add_saplings_flag", false)

-- (GLEM)
-- Flag set to true if GLEM biome blending should be enabled
unilib.setting.glem_biome_blend_flag = core.settings:get_bool("unilib_glem_biome_blend_flag", true)

-- (hangglider)
-- Warning time, in seconds, before hanggliders are shot down in no-fly zones
unilib.setting.hangglider_warning_time =
        unilib.utils.settings_get_int("unilib_hangglider_warning_time") or 3

-- (mesecons)
-- Flag set to true if mesecon circuits should automatically open/close doors
unilib.setting.mesecons_door_flag = core.settings:get_bool("unilib_mesecons_door_flag", true)
-- Flag set to true if mesecon circuits should automatically open/close trapdoors
unilib.setting.mesecons_trapdoor_flag =
        core.settings:get_bool("unilib_mesecons_trapdoor_flag", true)

-- (moreblocks)
-- Flag set to true if stone/glass traps should look very similar to the non-trap node; false if
--      they are easily distinguishable (as in the original code)
unilib.setting.moreblocks_hidden_trap_flag =
        core.settings:get_bool("unilib_moreblocks_hidden_trap_flag", false)

-- (nettle)
-- Damage factor for nettles (default value is 1)
unilib.setting.nettle_damage_factor =
        unilib.utils.settings_get_float("unilib_nettle_damage_factor") or 1.0

-- (nsspf)
-- Scarcity factor. In the original code, mushrooms/fungi are extremely common (and therefore food
--      is easy to find). Increase this value to make NSSPF mushrooms/fungi more scarce
unilib.setting.nsspf_scarcity_factor =
        unilib.utils.settings_get_float("unilib_nsspf_scarcity_factor") or 1.0
-- Flag set to true if truffles can be found on the surface (ideal for servers); false if they are
--      found just beneath the surface (ideal for single player worlds)
unilib.setting.nsspf_exposed_truffle_flag =
        core.settings:get_bool("unilib_nsspf_exposed_truffle_flag", false)

-- (pedology)
-- Drip mode (applies to certain items from pedology): "none" - don't use water drips, "entity" -
--      use entity-based water drips, "particle" - use particle-based water drips
unilib.setting.pedology_drip_mode = core.settings:get("unilib_pedology_drip_mode") or "none"
-- Minimum light level at which permeable nodes dry out from direct sunlight
unilib.setting.pedology_dry_light = unilib.utils.settings_get_int("unilib_pedology_dry_light") or 13

-- (plantlife)
-- Use larger textures for ordinary grass (i.e. default:grass_1, etc)
unilib.setting.plantlife_long_grass_flag =
        core.settings:get_bool("unilib_plantlife_long_grass_flag", false)
-- Flag set to true is poison ivy grows on a range of suitable surfaces, false if it grows only on a
--      small selection of nodes (as in the original code)
unilib.setting.plantlife_poison_ivy_unfussy_flag =
        core.settings:get_bool("unilib_plantlife_poison_ivy_unfussy_flag", false)
-- Flag set to true if poison ivy requires light (but not too much) to grow, false if poison ivy
--      grows in all all conditions
unilib.setting.plantlife_poison_ivy_light_flag =
        core.settings:get_bool("unilib_plantlife_poison_ivy_light_flag", false)
-- Flag set to true if poison ivy is actually poisonous, false if it is harmless (as in the original
--      mod)
-- (The damage is a multiple of unilib.nettle_damage_factor)
unilib.setting.plantlife_poison_ivy_poison_flag =
        core.settings:get_bool("unilib_plantlife_poison_ivy_poison_flag", false)

-- (real_torch)
-- Minimum time (in seconds) after which an ordinary torch burns out, becoming an unlit torch
--      (N.B. two default values in original code - 480 and 1200)
unilib.setting.real_torch_min_time =
        unilib.utils.settings_get_int("unilib_real_torch_min_time") or 480
-- Maximum time (in seconds) after which an ordinary torch burns out, becoming an unlit torch
--      (N.B. two default values in original code - 600 and 1800)
unilib.setting.real_torch_max_time =
        unilib.utils.settings_get_int("unilib_real_torch_max_time") or 600

-- (scaffolding)
-- Flag set to true if removing the tower automatically removes surrounding platforms; if false,
--      the player should remove the platform before removing the tower
unilib.setting.scaffolding_quick_remove_flag =
        core.settings:get_bool("unilib_scaffolding_quick_remove_flag", false)

-- (sickles)
-- Flag set to true if scythes should use the mechanic from the sickles mod (replant crops/produce
--      in the surrounding soil), false if scythes should use the mechanic from the farming_redo mod
--      (harvested crops/produce and seeds are dropped to the ground)
unilib.setting.sickles_replant_flag = core.settings:get_bool("unilib_sickles_replant_flag", true)
-- Flag set to true if the sickle mechanic should override the pitchfork mechanic inherited from
--      the cottages mod ("tool_pitchfork" package)
unilib.setting.sickles_override_pitchfork_flag =
        core.settings:get_bool("unilib_sickles_override_pitchfork_flag", false)

-- (snow)
-- Flag set to true to reduce the system resources required to produce falling snowflakes
unilib.setting.snow_reduce_snowflakes_flag =
        core.settings:get_bool("unilib_snow_reduce_snowflakes_flag", true)

-- (technic)
-- Flag set to true if technic should be given grinding recipes for suitable stone types/metal
--      lumps/mineral lumps. Automatically set back to false if technic is not loaded
unilib.setting.technic_update_flag = core.settings:get_bool("unilib_technic_update_flag", true)
-- Flag set to true if technic should be given additional recipes, mostly for foods and ingredients
--      (this may include grinder recipes)
unilib.setting.technic_extra_flag = core.settings:get_bool("unilib_technic_extra_flag", true)
-- How much powder is produced when grinding metal ores (minimum 1, recommended 2)
unilib.setting.technic_grind_metal_ratio =
        unilib.utils.settings_get_int("unilib_technic_grind_metal_ratio") or 2
-- How much powder is produced when grinding mineral ores (minimum 1, recommended 2)
unilib.setting.technic_grind_mineral_ratio =
        unilib.utils.settings_get_int("unilib_technic_grind_mineral_ratio") or 2
-- How much powder is produced when grinding stone (minimum 1, recommended 1)
unilib.setting.technic_grind_stone_ratio =
        unilib.utils.settings_get_int("unilib_technic_grind_stone_ratio") or 1

-- (toolranks)
-- Flag set to true if toolranks should be enabled for compatible tools
unilib.setting.toolranks_enable_flag = core.settings:get_bool("unilib_toolranks_enable_flag", false)
-- Number of levels for toolranks
unilib.setting.toolranks_max_levels =
        unilib.utils.settings_get_int("unilib_toolranks_max_levels") or 10
-- Number of nodes that need to be dug to reach the next tool level
unilib.setting.toolranks_nodes_per_level =
        unilib.utils.settings_get_int("unilib_toolranks_nodes_per_level") or 500
-- Maximum dig speed multiplier for toolranks (1.0 to disable)
unilib.setting.toolranks_speed_multiplier =
        unilib.utils.settings_get_float("unilib_toolranks_speed_multiplier") or 2.0
-- Maximum durability multiplier for toolranks (1.0 to disable)
unilib.setting.toolranks_use_multiplier =
        unilib.utils.settings_get_float("unilib_toolranks_use_multiplier") or 2.0

-- Flag set to true if the server's most advanced tool should be announced in chat
unilib.setting.toolranks_announce_flag =
        core.settings:get_bool("unilib_toolranks_announce_flag", false)
-- Flag set to true if levelling should be progressive (each new level takes 50% more time than the
--      previous one)
unilib.setting.toolranks_progressive_flag =
        core.settings:get_bool("unilib_toolranks_progressive_flag", true)
-- Flag set to true if the tool's description should show how long until level-up
unilib.setting.toolranks_countdown_flag =
        core.settings:get_bool("unilib_toolranks_countdown_flag", true)

-- (towercrane)
-- Maximum crane height in nodes (8..n)
unilib.setting.crane_max_height = unilib.utils.settings_get_int("unilib_crane_max_height") or 32
-- Maximum crane width in nodes (8..n)
unilib.setting.crane_max_width = unilib.utils.settings_get_int("unilib_crane_max_width") or 32
-- Crane rope length in nodes (max_height .. max_height+x). If the rope length is larger than the
--      crane height, the crane can be placed on buildings and the player still reaches the ground
unilib.setting.crane_rope_length = unilib.utils.settings_get_int("unilib_crane_rope_length") or 40

-- (trash_can)
-- Allow player to throw items into rubbish bin / dumpster (requires some additional processing
--      time)
unilib.setting.trash_can_throw_flag = core.settings:get_bool("unilib_trash_can_throw_flag", false)

-- (tsm_pyramids)
-- Flag set to true if sandstone traps collapse under the player, false if they are merely
--      decorative
unilib.setting.tsm_pyramids_real_trap_flag =
        core.settings:get_bool("unilib_tsm_pyramids_real_trap_flag", true)

-- (underch, uchu)
-- Flag set to true if code adapted from underch should be modified to include updates in uchu. Note
--      that the inclusion of compressed/condensed cobble depends on a separate setting
unilib.setting.underch_tweak_flag = core.settings:get_bool("unilib_underch_tweak_flag", false)
-- Flag set to true if flowing ordinary lava should cool into basalt, rather than cooling into
--      ordinary stone (i.e. set to true to apply the underch override)
unilib.setting.underch_override_abm_flag =
        core.settings:get_bool("unilib_underch_override_abm_flag", false)

-- (unifieddyes)
-- Flag set to true if suitable items can be dyed. Automatically set back to false if unifieddyes is
--      not loaded
unilib.setting.unifieddyes_update_flag =
        core.settings:get_bool("unilib_unifieddyes_update_flag", true)

-- (unified_inventory)
-- Flag set to true if unified_inventory should be given textures for group craft recipes.
--      Automatically set back to false if unified_inventory is not loaded
unilib.setting.unified_inventory_update_flag =
        core.settings:get_bool("unilib_unified_inventory_update_flag", true)

-- (xdecor)
-- Flag set to true to use xdecor's method for making tools "glow" (due to enchantment, etc); false
---     to use unilib's original method
unilib.setting.xdecor_glow_flag = core.settings:get_bool("unilib_xdecor_glow_flag", false)
-- The number of paintings from the xdecor collection to include. unilib provides twenty textures
--      in each of three sets (small, landscape and portrait), so use a value between 1 and 20
unilib.setting.xdecor_painting_count =
        unilib.utils.settings_get_int("unilib_xdecor_painting_count") or 20

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Biome/decoration/ore settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- For its decorations and ores, unilib uses pre-determined seeds by default. You can set the flags
--      below to use random-ish seeds instead
-- A seed offset is a random number between -32768 and 32767). This number is generated when a
--      world is created, and then added to the seed of every decoration and ore, producing a
--      "random" seed that is computationlly very cheap
-- There are two ways to produce the seed offset; one is completely random, and the other is derived
--      from the mapgen seed
-- If you use a seed offset derived from the mapgen seed, then it will be the same for every world
--      using that mapgen seed (in other words, decorations and ores will always be found in the
--      same place). Otherwise, decorations and ores will always be randomly distributed
-- N.B. Packages that create many decorations/ores should use unilib's seed offset as a base value,
--      and then increment that base value for every decoration/ore created; see code in the
--      "ore_gaia" package for a working example
--
-- Flag set to true if a truly random seed offset is applied to decorations and ores, so that
--      distributions are different in each world
unilib.setting.random_seed_offset_flag =
        core.settings:get_bool("unilib_random_seed_offset_flag", false)
-- Flag set to true if a seed offset derived from the mapgen seed is applied to decorations and
--      ores, so that distributions are different for each mapgen seed. Ignored if
--      unilib.setting.random_seed_offset_flag is true
unilib.setting.mapgen_seed_offset_flag =
        core.settings:get_bool("unilib_mapgen_seed_offset_flag", false)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Environment settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Super stones - a set of stone types that can be used to craft derivative products (for example,
--      we don't create timber-framed nodes from every available stone, but only from super stones).
--      Note that some items may not be available in every stone type (e.g. sandstones, stones of a
--      hardness that could produce cobble/rubble variants, but don't). If the set contains the word
--      "everything", then all suitable stones are super stones. If the set contains the word
--      "nothing", then no stones are super stones, overriding "everything"
-- Note that unilib creates a full range of stairs and carvings for super stones (depending on
--      whether the stairs/carvings settings below are enabled). For all other stones, only basic
--      stairs are created for smoothstone, cobble and rubble nodes, and walls are created for
--      cobble nodes
unilib.setting.super_stone_set =
        core.settings:get("unilib_super_stone_set") or "desert ordinary"
-- Super dirts - a set of dirt types that can be used to craft derivative products (for example, we
--      don't create country roads from every available dirt, but only from super dirts). Packages
--      can decide for themselves whether to create derivative products from just dirts, or (for
--      example) from dirts-with-turf. If the set contains the word "everything", then all suitable
--      dirts are super dirts. If the set contains the word "nothing", then no dirts are super
--      dirts, overriding "everything". Both dirt types and item names can be specified, e.g. for
--      "unilib:dirt_ordinary", specify either "ordinary" or "dirt_ordinary". Other items
--      occasionally combined with turfs or dirt covers can also be specified; e.g. for
--      "unilib:clay_red" specify "clay_red"
unilib.setting.super_dirt_set = core.settings:get("unilib_super_dirt_set") or "dry ordinary"
-- Super trees - a set of tree types that can be used to craft derivative products (for example,
--      we don't create bookshelves out of every available tree, but only from super trees). Note
--      that some items may not be available in every tree type (e.g. wooden boats). Note also that
--      fences/gates are created for every tree, when possible. If the set contains the word
--      "everything", then all suitable trees are super trees (some trees are not suitable, usually
--      because they have no wood nodes). If the set contains the word "nothing", then no trees are
--      super trees, overriding "everything"
-- Note that unilib creates a range of stairs and carvings for super stone woods (depending on
--      whether the stairs/carvings settings below are enabled). For all other wood nodes, only
--      basic stairs are created
unilib.setting.super_tree_set = core.settings:get("unilib_super_tree_set") or
        "acacia aspen apple jungle pine"

-- Flag set to true if cobble/rubble blocks can be compressed and condensed
unilib.setting.squeezed_stone_flag = core.settings:get_bool("unilib_squeezed_stone_flag", false)
-- Flag set to true if gravel blocks can be compressed. Note that ordinary gravel can't be
--      compressed, as it drops flint
unilib.setting.squeezed_gravel_flag = core.settings:get_bool("unilib_squeezed_gravel_flag", false)
-- Flag set to true if dirt blocks can be compressed
unilib.setting.squeezed_dirt_flag = core.settings:get_bool("unilib_squeezed_dirt_flag", false)
-- Flag set to true if sand blocks can be compressed
unilib.setting.squeezed_sand_flag = core.settings:get_bool("unilib_squeezed_sand_flag", false)
-- Flag set to true if metal blocks can be compressed
unilib.setting.squeezed_metal_flag = core.settings:get_bool("unilib_squeezed_metal_flag", false)
-- Flag set to true if tree leaves (but not bush leaves) can be compacted
unilib.setting.squeezed_leaves_flag = core.settings:get_bool("unilib_squeezed_leaves_flag", false)
-- Flag set to true if technic compressors/compactors should be used to craft squeezed blocks,
--      false if simple (but unrealistic) crafting recipes can be used
unilib.setting.squeezed_technic_flag = core.settings:get_bool("unilib_squeezed_technic_flag", true)
-- Flag set to true if squeezed block should have a maximum stack size of 999, false if they should
--      have the default stack size (99)
unilib.setting.squeezed_overstack_flag =
        core.settings:get_bool("unilib_squeezed_overstack_flag", false)

-- In the original mods, some stones have unrealistic hardnesses (e.g. sandstones in
--      minetest_game). Flag set to true if these should be replaced by a "real-world" hardness
unilib.setting.real_stone_hardness_flag =
        core.settings:get_bool("unilib_real_stone_hardness_flag", false)
-- Sandstones should not produce cobble or rubble when dug, by default. When the original mod
--      specifies a cobble or rubble, that choice is respected. Otherwise, cobble or rubble is
--      produced only when this flag is true
unilib.setting.sandstone_cobble_rubble_flag =
        core.settings:get_bool("unilib_sandstone_cobble_rubble_flag", false)
-- The rate at which various sands and gravels drop bonus items (for example, use 16 to make
--      ordinary gravel drop flint at a rate of 1 in 16). Minimum value 1, or use 0 to disable the
--      bonus drops altogether
unilib.setting.gravel_sand_bonus_rate =
        unilib.utils.settings_get_int("unilib_gravel_sand_bonus_rate") or 16

-- Flag set to true if caves chop through (most) dirt nodes, including dirt-with-turf nodes
unilib.setting.caves_chop_dirt_flag = core.settings:get_bool("unilib_caves_chop_dirt_flag", true)
-- Flag set to true if dirt-with-turf nodes should use the top texture on all sides (except the
--      bottom); if false, both the turf and the dirt is usually visible on the sides
unilib.setting.overgrown_turf_flag = core.settings:get_bool("unilib_overgrown_turf_flag", false)
-- Flag set to true if turf can spread from a dirt-with-turf node to any neighbouring dirt node;
--      false if the turf can spread only to a neighbouring dirt node if it's the same type of dirt
unilib.setting.unfussy_turf_flag = core.settings:get_bool("unilib_unfussy_turf_flag", false)
-- Flag set to true if custom dirts should be created on demand (i.e. when used in a custom biome),
--      or false if all possible custom dirts should be created
unilib.setting.dirt_on_demand_flag = core.settings:get_bool("unilib_dirt_on_demand_flag", true)
-- Flag set to true if dirts with turf/cover/litter should be invisible in the creative inventory,
--      false if they should be visible as normal (doesn't affect uncovered dirt nodes)
unilib.setting.show_covered_dirt_flag =
        core.settings:get_bool("unilib_show_covered_dirt_flag", true)

-- Flag set to true if (most) grasses should not drop themselves, but still drop any seeds etc, as
--      in certain commercial voxel games
unilib.setting.disable_grass_drop_flag =
        core.settings:get_bool("unilib_disable_grass_drop_flag", false)

-- Flag set to true if trees with trunk nodes should collapse, one column at a time, when a trunk
--      node is dug
unilib.setting.weak_tree_flag = core.settings:get_bool("unilib_weak_tree_flag", false)
-- Flag set to true if only trees with "slim" trunks should collapse, when a trunk node is dug.
--      Ignored if the flag above is set
unilib.setting.weak_slim_tree_flag = core.settings:get_bool("unilib_weak_slim_tree_flag", false)
-- Flag set to true if wooden planks, when placed in the world, should be auto-rotated to face a
--      standard direction
unilib.setting.auto_rotate_wood_flag = core.settings:get_bool("unilib_auto_rotate_wood_flag", false)
-- Flag set to true if "slim" tree trunks produce only two wood nodes, instead of four (as usual)
unilib.setting.reduced_wood_flag = core.settings:get_bool("unilib_reduced_wood_flag", false)
-- Flag set to true if leaves should be 3d-rendered in the player's inventory and when wielded,
--      false if not. (You may find it easier to distinguish leaves in the inventory when they are
--      not 3d-rendered)
unilib.setting.rendered_leaves_flag = core.settings:get_bool("unilib_rendered_leaves_flag", false)
-- Flag set to true if trees should have plant-like leaves (which can improve frame rates for some
--      users, without resorting to making leaves opaque)
unilib.setting.plantlike_leaves_flag = core.settings:get_bool("unilib_plantlike_leaves_flag", false)
-- Flag set to true if the player can walk on leaves, false if not
unilib.setting.walkable_leaves_flag = core.settings:get_bool("unilib_walkable_leaves_flag", false)
-- Flag set to true if most fruit, nuts, cones etc should regrow after being picked
unilib.setting.regrow_fruit_flag = core.settings:get_bool("unilib_regrow_fruit_flag", false)
-- Flag set to true if most leaves should drop ordinary sticks (as well as saplings)
unilib.setting.leaves_drop_sticks_flag =
        core.settings:get_bool("unilib_leaves_drop_sticks_flag", false)
-- When a remix decorations.csv specifies "treelog" decorations, each log schematic should have the
--      same scarcity as the corresponding tree schematics. The log probabilities are then multipled
--      by this value, so that the ratio of trees to logs can be set in a uniform way across all
--      biomes. Use the value 0 to disable treelog decorations from CSVs altogether
unilib.setting.tree_to_log_factor =
        unilib.utils.settings_get_float("unilib_tree_to_log_factor") or 0.1

-- Minimum sapling growth time, in seconds. Actual time is a random value between the minimum/
--      maximum times
unilib.setting.sapling_grow_min = unilib.utils.settings_get_int("unilib_sapling_grow_min") or 300
-- Maxium sapling growth time, in seconds. Actual time is a random value between the minimum/maximum
--      times
unilib.setting.sapling_grow_max = unilib.utils.settings_get_int("unilib_sapling_grow_max") or 1500
-- Standard growth time, in seconds, when a non-random value is required
unilib.setting.sapling_grow_default =
        unilib.utils.settings_get_int("unilib_sapling_grow_default") or 300
-- Sapling sapling growth retry time, in seconds (if growth cannot occur, the time before trying
--      again)
unilib.setting.sapling_grow_retry =
        unilib.utils.settings_get_int("unilib_sapling_grow_retry") or 300
-- Flag set to true if sapling growth times should be replaced with very short values (5 seconds)
--      for testing purposes. If true, overrides the growth settings above
unilib.setting.sapling_quick_grow_flag =
        core.settings:get_bool("unilib_sapling_quick_grow_flag", false)
-- Flag set to true if tree sapling growth times should be adjusted, based on the height of the tree
--      (so redwoods take much longer to grow, on average, than acacia trees). Does not work with
--      trees using custom or LBM code; does not work with bushes, ignored when
--      unilib.setting.sapling_quick_grow_flag is enabled
unilib.setting.sapling_variable_grow_flag =
        core.settings:get_bool("unilib_sapling_variable_grow_flag", false)
-- Flag set to true if a sapling that requires specific dirts can grow on any dirt, if the specific
--      dirts have not been loaded
unilib.setting.sapling_override_flag = core.settings:get_bool("unilib_sapling_override_flag", true)
-- Flag set to true if all saplings should grow on all dirts, overriding package preferences
unilib.setting.sapling_everywhere_flag =
        core.settings:get_bool("unilib_sapling_everywhere_flag", false)
-- Flag set to true if saplings which can't grow anywhere should include, in their descriptions, a
--      list of compatible surface nodes
unilib.setting.sapling_grow_hint_flag =
        core.settings:get_bool("unilib_sapling_grow_hint_flag", false)
-- Flag set to true if that list should omit any surface nodes that don't exist (this should work
--      well, as long as external mods appear in unilib's mod.conf, and as long as packages list
--      their dependencies)
unilib.setting.sapling_grow_hint_omit_flag =
        core.settings:get_bool("unilib_sapling_grow_hint_omit_flag", true)

-- Standard growth time, in seconds, for a stage of crop/produce growth
unilib.setting.farming_grow_default =
        unilib.utils.settings_get_int("unilib_farming_grow_default") or 160

-- Flag set to true if flora should be floodable (items are destroyed by a flowing liquid). This
--      setting applies to most flowers, plants, mushrooms, ferns, crops, produce (even those from
--      other mods)
unilib.setting.floodable_flora_flag = core.settings:get_bool("unilib_floodable_flora_flag", false)
-- Flag set to true if flora should be flushable (items are uprooted by a flowing liquid, as in
--      Minecraft). If the floodable flag is also true, this one takes precedence
unilib.setting.flushable_flora_flag = core.settings:get_bool("unilib_flushable_flora_flag", false)

-- Flag set to true if papyrus should be impassable
unilib.setting.blocking_papyrus_flag = core.settings:get_bool("unilib_blocking_papyrus_flag", true)
-- Flag set to true if waterlilies should be walkable
unilib.setting.walkable_waterlilies_flag =
        core.settings:get_bool("unilib_walkable_waterlilies_flag", true)

-- ABM spread factor. If 1, flora, mushrooms and turf spread at their normal rate. If 2, they spread
--      twice as quickly. If 0.5, they spread twice as slowly
unilib.setting.abm_spread_factor =
        unilib.utils.settings_get_float("unilib_abm_spread_factor") or 1.0

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Non-environment settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Flag set to true if brick blocks (including decorative bricks), when placed in the world, should
--      be auto-rotated to face a standard direction
unilib.setting.auto_rotate_brick_flag =
        core.settings:get_bool("unilib_auto_rotate_brick_flag", false)

-- Flag to allow player to craft dyes from crops, fruit etc. (Note that almost all flowers can be
--      used to craft dyes, by default)
unilib.setting.dye_from_crops_flag = core.settings:get_bool("unilib_dye_from_crops_flag", false)
unilib.setting.dye_from_fruit_flag = core.settings:get_bool("unilib_dye_from_fruit_flag", false)
unilib.setting.dye_from_produce_flag = core.settings:get_bool("unilib_dye_from_produce_flag", false)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Stair/wall/carving settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Flag set to true if suitable nodes (stone, wood etc) should be given basic stairs
unilib.setting.add_stairs_basic_flag = core.settings:get_bool("unilib_add_stairs_basic_flag", true)
-- Flag set to true if basic stairs should appear in the creative inventory
unilib.setting.show_stairs_basic_flag =
        core.settings:get_bool("unilib_show_stairs_basic_flag", false)
-- Flag set to true if basic stairs crafted from super stones and super trees should appear in the
--      creative inventory; if true, this flag overrides unilib.setting.show_stairs_basic_flag
-- This setting affects smooth stones, cobblestones and wood (but not bricks, blocks or tree panels)
-- Note that the "unified_inventory" mob won't be able to display any craft recipes using stair
--      groups if both "show" flags are false; note also that basic stairs aren't created at all if
--      the "add" flag is false
unilib.setting.show_stairs_super_flag =
        core.settings:get_bool("unilib_show_stairs_super_flag", true)

-- Flag set to true if suitable nodes should be given stairs from the stairs_redo mod
unilib.setting.add_stairs_stairs_redo_flag =
        core.settings:get_bool("unilib_add_stairs_stairs_redo_flag", false)
-- Flag set to true if stairs from stairs_redo should appear in the creative inventory
unilib.setting.show_stairs_stairs_redo_flag =
        core.settings:get_bool("unilib_show_stairs_stairs_redo_flag", false)
-- Flag set to true if suitable nodes should be given stairs from the stairsplus mod
unilib.setting.add_stairs_stairsplus_flag =
        core.settings:get_bool("unilib_add_stairs_stairsplus_flag", false)
-- Flag set to true if stairs from stairsplus should appear in the creative inventory
unilib.setting.show_stairs_stairsplus_flag =
        core.settings:get_bool("unilib_show_stairs_stairsplus_flag", false)
-- Flag set to true if suitable nodes should be given stairs from the moreblocks mod
unilib.setting.add_stairs_moreblocks_flag =
        core.settings:get_bool("unilib_add_stairs_moreblocks_flag", false)
-- Flag set to true if stairs from moreblocks should appear in the creative inventory
unilib.setting.show_stairs_moreblocks_flag =
        core.settings:get_bool("unilib_show_stairs_moreblocks_flag", false)
-- Flag set to true if suitable nodes should be given stairs from the plantlife mod
unilib.setting.add_stairs_plantlife_flag =
        core.settings:get_bool("unilib_add_stairs_plantlife_flag", false)
-- Flag set to true if stairs from plantlife should appear in the creative inventory
unilib.setting.show_stairs_plantlife_flag =
        core.settings:get_bool("unilib_show_stairs_plantlife_flag", false)
-- Flag set to true if suitable nodes should be given stairs from the castle modpack
unilib.setting.add_stairs_castle_flag =
        core.settings:get_bool("unilib_add_stairs_castle_flag", false)
-- Flag set to true if stairs from the castle modpack should appear in the creative inventory
unilib.setting.show_stairs_castle_flag =
        core.settings:get_bool("unilib_show_stairs_castle_flag", false)
-- Flag set to true if suitable nodes should be given stairs from the pkarcs modpack
unilib.setting.add_stairs_pkarcs_flag =
        core.settings:get_bool("unilib_add_stairs_pkarcs_flag", false)
-- Flag set to true if stairs from the pkarcs modpack should appear in the creative inventory
unilib.setting.show_stairs_pkarcs_flag =
        core.settings:get_bool("unilib_show_stairs_pkarcs_flag", false)

-- Flag set to true if stairs made from smooth stone just drop stairs made from cobblestone, when
--      dug (applies to all suitable stair nodes)
unilib.setting.convert_stairs_on_drop_flag =
        core.settings:get_bool("unilib_convert_stairs_on_drop_flag", true)
-- Flag set to true if the amount of light generated by stairs as light sources reduces by volume,
--      false if not (the effect is more drastic than for moreblocks)
unilib.setting.reduce_stair_light_flag =
        core.settings:get_bool("unilib_reduce_stair_light_flag", true)
-- Flag set to true if node roation is handled as it is in moreblocks; false when node rotation is
--      is handled as it is minetest_game/stairs. Note that moreblocks-style rotation is not applied
--      to stair types from plantlife. Note also that separate code handles rotation for stair types
--      from pkarcs, ignoring other settings
unilib.setting.advanced_stair_rotation_flag =
        core.settings:get_bool("unilib_advanced_stair_rotation_flag", true)

-- Flag set to true if suitable nodes (mostly stone) should be given walls
unilib.setting.add_walls_flag = core.settings:get_bool("unilib_add_walls_flag", true)

-- Flag set to true if suitable nodes (stone, wood etc) should be given column carvings
unilib.setting.add_carvings_column_flag =
        core.settings:get_bool("unilib_add_carvings_column_flag", true)
-- Flag set to true if column carvings should appear in the creative inventory
unilib.setting.show_carvings_column_flag =
        core.settings:get_bool("unilib_show_carvings_column_flag", false)
-- Flag set to true if suitable nodes (stone, wood etc) should be given facade carvings
unilib.setting.add_carvings_facade_flag =
        core.settings:get_bool("unilib_add_carvings_facade_flag", false)
-- Flag set to true if facade carvings should appear in the creative inventory
unilib.setting.show_carvings_facade_flag =
        core.settings:get_bool("unilib_show_carvings_facade_flag", false)
-- Flag set to true if suitable nodes (stone, wood etc) should be given millwork carvings
unilib.setting.add_carvings_millwork_flag =
        core.settings:get_bool("unilib_add_carvings_millwork_flag", false)
-- Flag set to true if millwork carvings should appear in the creative inventory
unilib.setting.show_carvings_millwork_flag =
        core.settings:get_bool("unilib_show_carvings_millwork_flag", false)
-- Flag set to true if suitable nodes (stone, wood etc) should be farlands carvings
unilib.setting.add_carvings_farlands_flag =
        core.settings:get_bool("unilib_add_carvings_farlands_flag", false)
-- Flag set to true if farlands carvings should appear in the creative inventory
unilib.setting.show_carvings_farlands_flag =
        core.settings:get_bool("unilib_show_carvings_farlands_flag", false)

-- Flag set to true if the amount of light generated by carvings as light sources reduces by volume,
--      false if not (the effect is less drastic than for stair nodes in moreblocks)
unilib.setting.reduce_carving_light_flag =
        core.settings:get_bool("unilib_reduce_carving_light_flag", true)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Player effects settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Flag set to true if special effects should be applied to Minetest builtin entities
-- Currently includes the following special effects: objects burn up in lava
unilib.setting.builtin_entity_effects_flag =
        core.settings:get_bool("unilib_builtin_entity_effects_flag", false)

-- Flag set to true if the player should be warned that their tool is about to break
unilib.setting.tool_warn_break_flag =
        core.settings:get_bool("unilib_toolranks_warn_break_flag", true)
-- The speed at which tools are repaired in an anvil or similar device, using a hammer. 1 to repair
--      the tool with a single punch, 0.1 to repair 10% of wear with a single punch
-- N.B. The original anvil code used 5000 wear per punch, the equivalent of factor 0.0762...
unilib.setting.tool_repair_factor =
        unilib.utils.settings_get_float("unilib_tool_repair_factor") or 0.075
-- Limit a tool's repairability by this factor, every time it is used with an anvil or similar
--      device. Suggested values: 0.1 to make a tool repairable 100 times, 0.01 to make a tool
--      repairable 1000 times, or 0 to make tools repairable any number of times
unilib.setting.tool_limit_repair_factor =
        unilib.utils.settings_get_float("unilib_tool_limit_repair_factor") or 0.0

-- Flag set to true if players respawn at the bed they last lay on, set to false for a normal
--      respawn
unilib.setting.bed_respawn_flag = core.settings:get_bool("unilib_bed_respawn_flag", true)
-- Flag set to true to make (most) beds bouncy
unilib.setting.bed_bouncy_flag = core.settings:get_bool("unilib_bed_bouncy_flag", true)

-- Flag set to true if bright items, when wielded, illuminate the player's surroundings
unilib.setting.wield_light_flag = core.settings:get_bool("unilib_wield_light_flag", false)

-- Flag set to true to pick up items automatically (Minecraft-style). If enabled for the whole
--      server, it can be toggled on a per-player basis with the /toggle_autoget command
unilib.setting.magnet_auto_get_flag = core.settings:get_bool("unilib_magnet_auto_get_flag", false)
-- Flag set to true to drop items automatically, when dug (Minecraft-style). If enabled for the
--      whole server, it can be toggled on a per-player basis with the /toggle_autodrop command
unilib.setting.magnet_auto_drop_flag = core.settings:get_bool("unilib_magnet_auto_drop_flag", false)
-- Flag set to true if a key should be pressed to auto-get items
unilib.setting.magnet_get_key_flag = core.settings:get_bool("unilib_magnet_get_key_flag", true)
-- Flag set to true if a key should NOT be pressed in order to auto-get items
unilib.setting.magnet_no_get_key_flag =
        core.settings:get_bool("unilib_magnet_no_get_key_flag", true)
-- The auto-get keytype
unilib.setting.magnet_get_key_type = core.settings:get("unilib_magnet_get_key_type") or "Use"
-- The volume of the auto-get sound
unilib.setting.magnet_auto_get_volume =
        unilib.utils.settings_get_float("unilib_magnet_auto_get_volume") or 0.4
-- Flag set to true to display particles on auto-get
unilib.setting.magnet_auto_get_particle_flag =
        core.settings:get_bool("unilib_magnet_auto_get_particle_flag", true)
-- The magnet radius (in blocks) in which auto-get works
unilib.setting.magnet_auto_get_radius =
        unilib.utils.settings_get_float("unilib_magnet_auto_get_radius") or 0.75
-- The magnet radius (in blocks) in which items fly towards the player. Set to -1 to disable item
--      flying
unilib.setting.magnet_auto_fly_radius =
        unilib.utils.settings_get_float("unilib_magnet_auto_fly_radius") or -1.0
-- Maximum item flight duration, in seconds. After the time has elapsed, items are added to the
--      player's inventory
unilib.setting.magnet_auto_fly_time =
        unilib.utils.settings_get_float("unilib_magnet_auto_fly_time") or 5.0
-- Time delay (in seconds) before auto-getting an item if it's dropped by a player
unilib.setting.magnet_auto_get_delay =
        unilib.utils.settings_get_float("unilib_magnet_auto_get_delay") or 0.5
-- Flag set to true if getting an item using a mouse click is enabled
unilib.setting.magnet_click_get_flag = core.settings:get_bool("unilib_magnet_click_get_flag", true)

-- Standard HUD position (collects all text-based HUDs into a single area of the screen). Use "top"
--      to place the HUD at the top of the screen (below the chat window), "middle" to place it
--      near the top, below the chat window, or "bottom" to place it near the bottom, above the
--      statbars. Default is "middle"
unilib.setting.hud_standard_posn = core.settings:get("unilib_hud_standard_posn") or "middle"
-- Flag set to true if text in the Standard HUD can use colour; false otherwise. Disable the
--      setting if you find the coloured text difficult to read
unilib.setting.hud_standard_colour_flag =
        core.settings:get_bool("unilib_hud_standard_colour_flag", true)
-- Hotbar size, a value between 1 and 32. Use 0 if you don't want to interfere with the hotbar size.
--      The /set_hotbar command, if available, overrides this value on a per-player basis
unilib.setting.hotbar_size = unilib.utils.settings_get_int("unilib_hotbar_size") or 8

-- Flag set to true to enabled advanced cuisine (eating the same food types reduces their satiating
--      effect; drinks improve hydration if enabled, otherwise behave as foods)
unilib.setting.cuisine_advanced_flag = core.settings:get_bool("unilib_cuisine_advanced_flag", false)
-- Size of the cuisine history (a list of food groups, so the actual number of food items eaten may
--      be fewer). The larger the number, the more a player must vary their diet
unilib.setting.cuisine_history_max_size =
        unilib.utils.settings_get_int("unilib_cuisine_history_max_size") or 10
-- Satiation bonus, applied when the player eats something new (ignored if player activity
--      statistics are disabled). Use 2 to double the satiation for eating a new food, or 0.5 to
--      halve it. Bonus does not apply to poisonous/zero-satiation items, or to drinks when
--      hydration is enabled
unilib.setting.cuisine_novelty_factor =
        unilib.utils.settings_get_float("unilib_cuisine_novelty_factor") or 1.5

-- Flag set to true to enable player hunger (as separate from player health). This flag is
--      automatically disabled in any world in which damage is disabled
unilib.setting.hunger_enable_flag = core.settings:get_bool("unilib_hunger_enable_flag", false)
-- Hunger factor - use 2 to double the rate at which the player becomes hungry, or 0.5 to halve it.
--      This value can be adjusted for worlds in which food is more common (or scarce)
unilib.setting.hunger_factor = unilib.utils.settings_get_float("unilib_hunger_factor") or 1.0
-- Flag set to true to enable player hunger due to sprinting
unilib.setting.hunger_on_sprint_flag = core.settings:get_bool("unilib_hunger_on_sprint_flag", true)
-- Sprinting factor - use 2 to double the rate at which the player becomes hungry due to sprinting,
--      or 0.5 to halve it
unilib.setting.hunger_on_sprint_factor =
        unilib.utils.settings_get_float("unilib_hunger_on_sprint_factor") or 1.0

-- Flag set to true to enable player hydration/thirst
unilib.setting.thirst_enable_flag = core.settings:get_bool("unilib_thirst_enable_flag", false)
-- Thirst factor - use 2 to double the rate at which the player becomes thirsty, or 0.5 to halve it
-- N.B. In the original code, an active player reached maximum thirst after 6 minutes 40 seconds
--      (assuming unilib.setting.thirst_factor = 1). This has been adjusted, so it now takes
--      slightly over 20 minutes (a game day)
unilib.setting.thirst_factor = unilib.utils.settings_get_float("unilib_thirst_factor") or 1.0

-- Flag set to true to enable HUD windows identifying the node at which the mouse is pointed. The
--       window is shown or hidden when the player types /what
unilib.setting.identify_enable_hud_flag =
        core.settings:get_bool("unilib_identify_enable_hud_flag", true)
-- The position of the HUD window: "corner" for the top-left corner, "middle" for the top middle,
--      exactly centred, and "fixed" for a location near the top middle, always at a fixed
--      distance from the top-left corner
unilib.setting.identify_hud_mode = core.settings:get("unilib_identify_hud_mode") or "fixed"
-- Flag set to true to optimise the HUD window for servers (only appears when a node is punched)
unilib.setting.identify_optimise_hud_flag =
        core.settings:get_bool("unilib_identify_optimise_hud_flag", false)
-- Flag set to true to show the parent unilib package, rather than the mod name, when possible
unilib.setting.identify_package_name_flag =
        core.settings:get_bool("unilib_identify_package_name_flag", false)

-- Flag set to true to enable wieldview mode (other players can see your wielded item). Note that
--      wieldview mode requires some form of armour, for example by using the "armour" remix
unilib.setting.wield_view_enable_flag =
        core.settings:get_bool("unilib_wield_view_enable_flag", true)
-- Number of seconds between wieldview mode updates
unilib.setting.wield_view_update_time =
        unilib.utils.settings_get_int("unilib_wield_view_update_time") or 2
-- Flag set to if nodes are shown as tiles in wieldview mode
unilib.setting.wield_view_node_tiles_flag =
        core.settings:get_bool("unilib_wield_view_node_tiles_flag", true)

-- Flag set to true to enable daily alarms
unilib.setting.alarm_enable_flag = core.settings:get_bool("unilib_alarm_enable_flag", true)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Player effects settings (statistics and calendars)
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Flag set to true, if player's biographical data (births, deaths etc) should be stored in player
--      attributes
-- (N.B. data is deserialised and stored in unilib.global.player_stats_bio_table, while the player
--      is connected)
unilib.setting.stats_bio_flag = core.settings:get_bool("unilib_stats_bio_flag", false)
-- Flag set to true, if player's activity data (nodes dug/placed etc) should be stored in player
--      attributes
-- (N.B. data is deserialised and stored in unilib.global.player_stats_activity_table, while the
--      player is connected)
unilib.setting.stats_activity_flag = core.settings:get_bool("unilib_stats_activity_flag", false)

-- Calendar offsets, specifying the date at which the calendar starts. Positive integers only,
--      invalid values are reset to 1 (in ../lib/shared/calendars/calendars_base.lua)
unilib.setting.calendar_year_offset =
        unilib.utils.settings_get_int("unilib_calendar_year_offset") or 1000
unilib.setting.calendar_month_offset =
        unilib.utils.settings_get_int("unilib_calendar_month_offset") or 1
unilib.setting.calendar_day_offset =
        unilib.utils.settings_get_int("unilib_calendar_day_offset") or 1
-- Calendar system; a string describing the date system. An empty string is acceptable, in which
--      case the system isn't added to a date string
unilib.setting.calendar_system = core.settings:get("unilib_calendar_system") or S("A.D.")
-- Flag set to true if leap years are in effect, false if not. If true, a leap day is added to
--      the second month of the year
unilib.setting.calendar_leap_year_flag =
        core.settings:get_bool("unilib_calendar_leap_year_flag", true)
-- Standard date string format, in which certain values are substituted (see the comments in the
--      unilib.calendars.format_date() function, in ../lib/shared/calendars/calendars_base.lua)
unilib.setting.calendar_format_string = core.settings:get("unilib_calendar_format_string") or
        "%D, %d %M %y %S %E %T"
-- Flag set to true if calendar tooltips are enabled. If false, the tooltip text can be viewed by
--      clicking on each day's button
unilib.setting.calendar_enable_tooltips_flag =
        core.settings:get_bool("unilib_calendar_enable_tooltips_flag", true)
-- Offset controlling which day the calendar week starts, e.g. 0 for Sunday, 1 for Monday, etc
unilib.setting.calendar_week_start_offset =
        unilib.utils.settings_get_int("unilib_calendar_week_start_offset") or 1

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Age-appropriate settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Flag set to true if packages providing alcoholic drinks are enabled. The setting is DISABLED BY
--      DEFAULT. When disabled (set to false), any such packages are not executed, even when they
--      are specified by a remix
-- Note that unilib (and its "official" expansion packs) treat alcohol like an ordinary drink; there
--      are no game mechanics that simulate intoxication
-- Note also that unilib (and its "official" expansion packs) do not contain any other kind of
--      "adult" material. Subject to your own discretion, it may be appropriate to enable this
--      setting for worlds in which children are playing. You should, of course, check non-official
--      expansion packs before you install them
unilib.setting.enable_adult_content_flag =
        core.settings:get_bool("unilib_enable_adult_content_flag", false)

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Debug settings
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --

-- Flag set to true to force-disable all player effects (apart from debug player effects)
unilib.setting.debug_disable_effects_flag =
        core.settings:get_bool("unilib_debug_disable_effects_flag", false)
-- Flag set to true to force-enable all player effects (apart from debug player effects). Ignored if
--      effects have been force-disabled
unilib.setting.debug_enable_effects_flag =
        core.settings:get_bool("unilib_debug_enable_effects_flag", false)

-- Flag set to true to show a warning, when reading a .csv file, for duplicate lines (after leading/
--      trailing whitespace has been stripped)
unilib.setting.debug_warn_duplicate_line_flag =
        core.settings:get_bool("unilib_debug_warn_duplicate_line_flag", false)

-- Flag set to true to remove the not_in_creative_inventory group from all nodes, craftitems and
--      tools
unilib.setting.debug_all_inventory_flag =
        core.settings:get_bool("unilib_debug_all_inventory_flag", false)

-- Flag set to true if the full name of a node/craftitem/tool should be added to its description, so
--      that it is visible in the inventory
unilib.setting.debug_add_name_flag = core.settings:get_bool("unilib_debug_add_name_flag", false)
-- Flag set to true if the original name of a node/craftitem/tool should be added to its
--      description, so that it is visible in the inventory. Applies only to unilib items
unilib.setting.debug_add_orig_name_flag =
        core.settings:get_bool("unilib_debug_add_orig_name_flag", false)

-- Ambient light level, an integer in the range 0-14. If above 0, all (unilib) nodes emit at least
--      that amount of light. Recommended values: 0 or 4-5
unilib.setting.debug_force_light_source =
        unilib.utils.settings_get_int("unilib_debug_force_light_source") or 0
-- Flag set to true to make all stone transparent, and disable falling nodes (used for checking ore
--      distributions)
-- N.B. This setting disables decorations (both in unilib, and in the original mod)
-- N.B. It is recommended that the debug ambient light setting be increased from 0
-- N.B. See also the /trench command
unilib.setting.debug_xray_flag = core.settings:get_bool("unilib_debug_xray_flag", false)

-- Flag set to true if all biomes, decorations and ores should be checked for valid values of
--      .y_max and .y_min
unilib.setting.debug_check_heights_flag =
        core.settings:get_bool("unilib_debug_check_heights_flag", false)
-- Forced biome. If set, only the specified unilib biome will be created, and its height/heat/
--      humidity parameters will be reset, so that it occurs all over the world
unilib.setting.debug_forced_biome = core.settings:get("unilib_debug_forced_biome") or ""
-- Temporary biome filter. If specified, only biomes whose names match this regex (e.g. "grassland")
--      are created. The regex is not checked against non-unilib biomes
unilib.setting.debug_biome_filter = core.settings:get("unilib_debug_biome_filter") or ""

-- Flag set to true if a message should be displayed, when a sapling does not grow
unilib.setting.debug_sapling_failure_flag =
        core.settings:get_bool("unilib_debug_sapling_failure_flag", false)

-- Biome showcase mode, intended for the "flat" mapgen. When true, each biome generated by the game
--      is confined to one zone (25x25 blocks by default), in a grid near the centre of the world.
--      All areas outside the grid have no biome. If true, unilib.setting.debug_forced_biome is
--      ignored
unilib.setting.debug_biome_showcase_flag =
        core.settings:get_bool("unilib_debug_biome_showcase_flag", false)
-- The size of a biome zone in biome showcase mode, in blocks (absolute minimum is 10)
unilib.setting.debug_biome_showcase_size =
        unilib.utils.settings_get_int("unilib_debug_biome_showcase_size") or 25
-- Flag set to true if biomes that generate below or above certain specified heights, should be
--      excluded from the showcase
unilib.setting.debug_biome_showcase_exclude_flag =
        core.settings:get_bool("unilib_debug_biome_showcase_exclude_flag", false)
-- Minimum height, below which biomes are excluded (if their .y_max is not higher)
unilib.setting.debug_biome_showcase_min_height =
        unilib.utils.settings_get_int("unilib_debug_biome_showcase_min_height") or 1
-- Maximum height, above which biomes are excluded (if their .y_min is not lower)
unilib.setting.debug_biome_showcase_max_height =
        unilib.utils.settings_get_int("unilib_debug_biome_showcase_max_height") or 31000
