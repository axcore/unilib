---------------------------------------------------------------------------------------------------
-- unilib mod by A S Lewis, incorporating materials from many other mods
---------------------------------------------------------------------------------------------------
-- From:    plantlife/pl_waterlilies
-- Code:    LGPL v3.0
-- Media:   CC-by-SA 4.0
---------------------------------------------------------------------------------------------------

unilib.pkg.flower_waterlily_ordinary_alt = {}

local S = unilib.intllib
local mode = unilib.imported_mod_table.pl_waterlilies.add_mode

local waterlily_list = {
    {"flowers:waterlily", "large1"},
    {"flowers:waterlily_225", "large2"},            -- same but at 22.5 degree angle
    {"flowers:waterlily_45", "large3"},             -- 45 degree angle
    {"flowers:waterlily_675", "large4"},            -- 67.5 degree angle
    {"flowers:waterlily_s1", "small1"},             -- these four have independent textures
    {"flowers:waterlily_s2", "small2"},
    {"flowers:waterlily_s3", "small3"},
    {"flowers:waterlily_s4", "small4"},
}

---------------------------------------------------------------------------------------------------
-- Local functions
---------------------------------------------------------------------------------------------------

local function place_func(pos)

    local right_here = {x = pos.x, y = pos.y + 1, z = pos.z}
    local full_name = "unilib:flower_waterlily_ordinary_" .. waterlily_list[math.random(1, 4)][2]
    minetest.swap_node(right_here, {name = full_name, param2 = math.random(0, 3)})

end

---------------------------------------------------------------------------------------------------
-- New code
---------------------------------------------------------------------------------------------------

function unilib.pkg.flower_waterlily_ordinary_alt.init()

    return {
        description = "Provides a selection of ordinary waterlilies rotated at a number of" ..
                " angles, as well as some smaller waterlilies. If the" ..
                " \"flower_waterlily_ordinary\" package is also loaded, it creates no" ..
                " ordinary waterliles, allowing this package to completely replace it",
        depends = {"liquid_water_ordinary", "stone_ordinary"},
        optional = "flower_waterlily_ordinary",
    }

end

function unilib.pkg.flower_waterlily_ordinary_alt.exec()

    -- This package must replace the ordinary waterlily generated by the package from minetest_game
    if unilib.pkg_executed_table["flower_waterlily_ordinary"] ~= nil then

        if minetest.registered_nodes["unilib:flower_waterlily_ordinary"] ~= nil then
            minetest.unregister_item("unilib:flower_waterlily_ordinary")
        end

        if minetest.registered_nodes["flowers:waterlily"] ~= nil then
            minetest.unregister_item("flowers:waterlily")
        end

        if minetest.registered_nodes["unilib:flower_waterlily_ordinary_waving"] ~= nil then
            minetest.unregister_item("unilib:flower_waterlily_ordinary_waving")
        end

        if minetest.registered_nodes["flowers:waterlily_waving"] ~= nil then
            minetest.unregister_item("flowers:waterlily_waving")
        end

    end

    for _, mini_list in ipairs(waterlily_list) do

        local orig_name = mini_list[1]
        local part_name = mini_list[2]
        local group_table = {flammable = 2, flower = 1, snappy = 3}
        if part_name ~= "thick" then
            group_table.not_in_creative_inventory = 1
        end

        unilib.register_node("unilib:flower_waterlily_ordinary_" .. part_name, orig_name, mode, {
            -- From pl_waterlilies, flowers:waterlily etc
            description = S("Ordinary Waterlily"),
            tiles = {
                "unilib_flower_waterlily_ordinary_" .. part_name ..".png",
                "unilib_flower_waterlily_ordinary_" .. part_name ..".png^[transformFY",
            },
            groups = group_table,
            sounds = unilib.sound_table.leaves,

            buildable_to = true,
            drawtype = "nodebox",
            drop = "unilib:flower_waterlily_ordinary_large1",
            inventory_image = "unilib_flower_waterlily_ordinary_large1.png",
            liquids_pointable = true,
            node_box = {
                type = "fixed",
                fixed = { -0.5, -0.49, -0.5, 0.5, -0.49, 0.5 },
            },
            node_placement_prediction = "",
            paramtype = "light",
            paramtype2 = "facedir",
            selection_box = {
                type = "fixed",
                fixed = { -0.4, -0.5, -0.4, 0.4, -0.45, 0.4 },
            },
            sunlight_propagates = true,
            use_texture_alpha = "clip",
            walkable = unilib.walkable_waterlilies_flag,
            wield_image = "unilib_flower_waterlily_ordinary_large1.png",

            on_place = function(itemstack, placer, pointed_thing)

                local keys=placer:get_player_control()
                local pt = pointed_thing

                local place_pos = nil
                local top_pos = {x = pt.under.x, y = pt.under.y + 1, z = pt.under.z}
                local under_node = minetest.get_node(pt.under)
                local above_node = minetest.get_node(pt.above)
                local top_node = minetest.get_node(top_pos)

                if unilib.get_node_field(under_node.name, "buildable_to") then

                    if under_node.name ~= "unilib:liquid_water_ordinary_source" then
                        place_pos = pt.under
                    elseif top_node.name ~= "unilib:liquid_water_ordinary_source" and
                            unilib.get_node_field(top_node.name, "buildable_to") then
                        place_pos = top_pos
                    else
                        return
                    end

                elseif unilib.get_node_field(above_node.name, "buildable_to") then

                    place_pos = pt.above

                end

                -- N.B. This if-block is missing in pl_waterliles, so copied from equivalent code
                --      from pl_seaweed
                if not place_pos then

                    -- Something went wrong
                    return

                end

                if place_pos and not minetest.is_protected(place_pos, placer:get_player_name()) then

                    -- Notes from pl_waterlilies:
                    -- If this block appears in the world, something went wrong
                    local nodename = "unilib:stone_ordinary_cobble"

                    if not keys["sneak"] then

                        local node = minetest.get_node(pt.under)
                        nodename = "unilib:flower_water_ordinary_" ..
                                waterlily_list[math.random(1, 8)][2]
                        minetest.swap_node(place_pos, {name = nodename, param2 = math.random(0,3)})

                    else

                        local fdir = minetest.dir_to_facedir(placer:get_look_dir())
                        minetest.swap_node(
                            place_pos,
                            {name = "unilib:flower_water_ordinary_large1", param2 = fdir}
                        )

                    end

                    if not unilib.is_creative(player_name) then
                        itemstack:take_item()
                    end

                    return itemstack

                end

            end,
        })
        -- (not compatible with flowerpots)

    end

    -- N.B. biome_lib decorations from the original code are difficult to translate into
    --      minetest.register_decoration() calls, because the latter doesn't work when the .place_on
    --      node is a liquid
    -- This decoration is more closely related to minetest_game's waterlily decoration, than to the
    --      plantlife version
    unilib.register_decoration_convertable({
        -- Creates generic definition "convert_flower_waterlily_ordinary"
        part_name = "flower_waterlily_ordinary",
        convert_func = place_func,
        replace_mode = mode,

        climate_table = {
            temp_max = unilib.convert_biome_lib_temp(-0.22),
            temp_min = unilib.convert_biome_lib_temp(0.22),
        },
        generic_def_table = {
            fill_ratio = unilib.convert_biome_lib({
                rarity = 33,
                plantlife_limit = -0.9,
            }),
            place_offset_y = 1,
        },
    })

end
